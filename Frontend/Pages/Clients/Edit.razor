@page "/Clients/Edit/{Id:int}"

@using BlazorApp.Models
@using System.Text.Json.Nodes

<div class="row">
    <div class="col-lg-8">
        <h1 class="mb-5">Edit Client</h1>

        @if (client == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Client ID</label>
                <div class="col-md-8">
                    <input class="form-control-plaintext" @bind="Id" readonly>
                </div>
            </div>
        
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">First name</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="clientData.FirstName">
                    <span class="text-danger">@Errors["FirstName"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Last name</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="clientData.LastName">
                    <span class="text-danger">@Errors["LastName"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Email</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="clientData.Email">
                    <span class="text-danger">@Errors["Email"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Phone number</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="clientData.PhoneNumber">
                    <span class="text-danger">@Errors["PhoneNumber"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Address</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="clientData.Address">
                    <span class="text-danger">@Errors["Address"]?[0]</span>
                </div>
            </div>

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Status</label>
                <div class="col-md-8">
                    <select class="form-select" @bind="clientData.Status">
                        <option value="New">New</option>
                        <option value="Permanent">Permanent</option>
                        <option value="Lead">Lead</option>
                        <option value="Seasonal">Seasonal</option>
                        <option value="Inactive">Inactive</option>
                    </select>
                    <span class="text-danger">@Errors["Status"]?[0]</span>
                </div>
            </div>

            <div class="row">
                <div class="offset-md-4 col-md-4 d-grid">
                    <button class="btn btn-primary" @onclick="SaveClient">Submit</button>
                </div>
                <div class="col-md-4 d-grid">
                    <a class="btn btn-outline-primary" href="/Clients">Cancel</a>
                </div>
            </div>
        }
    </div>
</div>

@inject HttpClient http
@inject NavigationManager navManager
@code {

    [Parameter] public int Id { get; set; }
    public Client? client = null;
    public ClientDto clientData { get; set; } = new();
    public JsonNode Errors { get; set; } = new JsonObject();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            client = await http.GetFromJsonAsync<Client>($"http://localhost:4000/api/Clients/{Id}");
            clientData.FirstName = client?.FirstName ?? string.Empty;
            clientData.LastName = client?.LastName ?? string.Empty;
            clientData.Email = client?.Email ?? string.Empty;
            clientData.PhoneNumber = client?.PhoneNumber ?? string.Empty;
            clientData.Address = client?.Address ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    protected async Task SaveClient()
    {
        HttpResponseMessage? response = await http.PutAsJsonAsync($"http://localhost:4000/api/Clients/{Id}", clientData);

        if (response.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/Clients");
        }
        else
        {
            String? strResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine("JSON Response: \n" + strResponse);

            try
            {
                JsonNode? jsonResponse = JsonNode.Parse(strResponse);
                Errors = jsonResponse?["errors"] ?? new JsonObject();
            }
            catch (Exception ex)
            {

            }
        }
    }
}
